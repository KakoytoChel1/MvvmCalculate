<Window x:Class="CalculateMVVM.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CalculateMVVM"
        mc:Ignorable="d"
        Title="MainWindow" Height="550" Width="300" WindowStartupLocation="CenterScreen" BorderThickness="1.5" BorderBrush="Gray" Background="#121212" WindowStyle="None" AllowsTransparency="True">
    <Window.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--style for all round buttons-->
        <Style TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="#1f2023"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="Width" Value="55"/>
            <Setter Property="Height" Value="55"/>
            <Setter Property="FontSize" Value="25"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="28" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Opacity" TargetName="border" Value="0.7"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Opacity" TargetName="border" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="CloseAndMinimizeStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border"  BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#640cf2"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="Transparent"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="35"/>
            <RowDefinition/>
            <RowDefinition/>
            <RowDefinition/>
            <RowDefinition/>
            <RowDefinition/>
            <RowDefinition/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <Button x:Name="closeButton" Grid.Column="3" Width="40"  HorizontalAlignment="Right" Style="{DynamicResource CloseAndMinimizeStyle}">
            <Image Source="images/closeButton.png" Width="18" />
        </Button>
        <Button x:Name="minimizeButton" Grid.Column="3" Width="35" HorizontalAlignment="Left" Style="{DynamicResource CloseAndMinimizeStyle}">
            <Image Source="images/minimizeButton.png" Width="16" Margin="0,8,0,0"/>
        </Button>
        <Label x:Name="dragMove"  Grid.ColumnSpan="3"/>

        <!--buttons with numbers-->
        <Button x:Name="button1" Grid.Column="0" Grid.Row="4" Command="{Binding Print}" CommandParameter="{Binding ElementName=button1 , Path=Content}">
            1
        </Button>
        <Button x:Name="button2" Grid.Column="1" Grid.Row="4" Command="{Binding Print}" CommandParameter="{Binding ElementName=button2 , Path=Content}">
            2
        </Button>
        <Button x:Name="button3" Grid.Column="2" Grid.Row="4" Command="{Binding Print}" CommandParameter="{Binding ElementName=button3 , Path=Content}">
            3
        </Button>
        <Button x:Name="button4" Grid.Column="0" Grid.Row="5" Command="{Binding Print}" CommandParameter="{Binding ElementName=button4 , Path=Content}">
            4
        </Button>
        <Button x:Name="button5" Grid.Column="1" Grid.Row="5" Command="{Binding Print}" CommandParameter="{Binding ElementName=button5 , Path=Content}">
            5
        </Button>
        <Button x:Name="button6" Grid.Column="2" Grid.Row="5" Command="{Binding Print}" CommandParameter="{Binding ElementName=button6 , Path=Content}">
            6
        </Button>
        <Button x:Name="button7" Grid.Column="0" Grid.Row="6" Command="{Binding Print}" CommandParameter="{Binding ElementName=button7 , Path=Content}">
            7
        </Button>
        <Button x:Name="button8" Grid.Column="1" Grid.Row="6" Command="{Binding Print}" CommandParameter="{Binding ElementName=button8 , Path=Content}">
            8
        </Button>
        <Button x:Name="button9" Grid.Column="2" Grid.Row="6" Command="{Binding Print}" CommandParameter="{Binding ElementName=button9 , Path=Content}">
            9
        </Button>
        <Button x:Name="button0" Grid.Column="0" Grid.ColumnSpan="2" Width="130" Padding="0,0,75,0" Grid.Row="7" Command="{Binding Print}" CommandParameter="{Binding ElementName=button0 , Path=Content}">
            0
        </Button>

        <!--buttons with other functions-->
        <Button x:Name="buttonBracket1" Grid.Column="0" Grid.Row="3" Padding="0,0,0,6" FontSize="20" Background="#640cf2" Command="{Binding Print}" CommandParameter="{Binding ElementName=buttonBracket1 , Path=Content}">
            (
        </Button>
        <Button x:Name="buttonBracket2" Grid.Column="1" Grid.Row="3" Padding="0,0,0,6" FontSize="20" Background="#640cf2" Command="{Binding Print}" CommandParameter="{Binding ElementName=buttonBracket2 , Path=Content}">
            )
        </Button>
        <Button x:Name="backSpace" Grid.Column="2" Grid.Row="3" Background="#640cf2" Command="{Binding BackSpace}">
            <Image Source="images/backspace.png" Width="25"/>
        </Button>

        <!--buttons with math operators-->
        <Button x:Name="addPlus" Grid.Column="3" Grid.Row="3" Background="Blue" Padding="0,0,0,6" Command="{Binding Print}" CommandParameter="{Binding ElementName=addPlus , Path=Content}" >
            +
        </Button>
        <Button x:Name="addMinus" Grid.Column="3" Grid.Row="4" Background="Blue" Padding="0,0,0,6" Command="{Binding Print}" CommandParameter="{Binding ElementName=addMinus, Path=Content}">
            -
        </Button>
        <Button x:Name="addMultiply" Grid.Column="3" Grid.Row="5" Background="Blue" Padding="0,0,0,6" Command="{Binding Print}" CommandParameter="{Binding ElementName=addMultiply , Path=Content}">
            ×
        </Button>
        <Button x:Name="addDivide" Grid.Column="3" Padding="0,0,0,6" Grid.Row="6" Background="Blue" Command="{Binding Print}" CommandParameter="{Binding ElementName=addDivide , Path=Content}" >
            ÷
        </Button>

        <!--get result-->
        <Button Grid.Column="3" Grid.Row="7" Background="#f27f0c" Command="{Binding Solve}" Padding="0,0,1,6">
            =
        </Button>

        <Button x:Name="dot" Grid.Column="2" Grid.Row="7" Command="{Binding Print}" CommandParameter="{Binding ElementName=dot , Path=Content}">
            .
        </Button>

        <!--Result-->
        <TextBlock  Text="{Binding Result , Mode=OneWay}" FontSize="23" Padding="15,23,0,0" Foreground="White" Grid.ColumnSpan="4" Grid.Row="2"/>
        <!--Expression-->
        <TextBlock  Foreground="White" FontSize="18" Padding="15,23,0,0" Text="{Binding Expression , UpdateSourceTrigger=PropertyChanged}"  Grid.ColumnSpan="4" Grid.Row="1"/>

    </Grid>
</Window>
